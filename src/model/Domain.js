/**
 * Mail-Hub API
 * This is a specification for Mail-Hub API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: support@mail-hub.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Domain model module.
 * @module model/Domain
 * @version 0.8.0
 */
class Domain {
    /**
     * Constructs a new <code>Domain</code>.
     * @alias module:model/Domain
     */
    constructor() { 
        
        Domain.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Domain</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Domain} obj Optional instance to populate.
     * @return {module:model/Domain} The populated <code>Domain</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Domain();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('catchAll')) {
                obj['catchAll'] = ApiClient.convertToType(data['catchAll'], 'Boolean');
            }
            if (data.hasOwnProperty('defaultFwdThreshold')) {
                obj['defaultFwdThreshold'] = ApiClient.convertToType(data['defaultFwdThreshold'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('enabled')) {
                obj['enabled'] = ApiClient.convertToType(data['enabled'], 'Boolean');
            }
        }
        return obj;
    }


}

/**
 * @member {Number} id
 */
Domain.prototype['id'] = undefined;

/**
 * @member {String} name
 */
Domain.prototype['name'] = undefined;

/**
 * @member {module:model/Domain.TypeEnum} type
 */
Domain.prototype['type'] = undefined;

/**
 * @member {Boolean} catchAll
 */
Domain.prototype['catchAll'] = undefined;

/**
 * @member {Number} defaultFwdThreshold
 * @default 10
 */
Domain.prototype['defaultFwdThreshold'] = 10;

/**
 * @member {String} status
 */
Domain.prototype['status'] = undefined;

/**
 * @member {Boolean} enabled
 */
Domain.prototype['enabled'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Domain['TypeEnum'] = {

    /**
     * value: "parked"
     * @const
     */
    "parked": "parked",

    /**
     * value: "subdomain"
     * @const
     */
    "subdomain": "subdomain"
};



export default Domain;

