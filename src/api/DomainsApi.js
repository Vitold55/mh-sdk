/**
 * Mail-Hub API
 * This is a specification for Mail-Hub API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: support@mail-hub.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Domain from '../model/Domain';
import InlineObject1 from '../model/InlineObject1';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2001 from '../model/InlineResponse2001';
import Model0 from '../model/Model0';
import OneDomain from '../model/OneDomain';
import OneOfobjectobject from '../model/OneOfobjectobject';
import UNKNOWN_BASE_TYPE from '../model/UNKNOWN_BASE_TYPE';

/**
* Domains service.
* @module api/DomainsApi
* @version 0.8.0
*/
export default class DomainsApi {

    /**
    * Constructs a new DomainsApi. 
    * @alias module:api/DomainsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the domainsGet operation.
     * @callback module:api/DomainsApi~domainsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Domain>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all domains
     * List domains of organization. </br>  Domain in list doesn't include destination addresses. 
     * @param {module:api/DomainsApi~domainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Domain>}
     */
    domainsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Domain];
      return this.apiClient.callApi(
        '/domains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsIdDelete operation.
     * @callback module:api/DomainsApi~domainsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete domain
     * Delete domain by id. </br> Domain will be marked as deleted and may be restored later. </br> Domain ownership is never transferred between organizations. 
     * @param {Number} id ID of domain
     * @param {module:api/DomainsApi~domainsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    domainsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling domainsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/domains/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsIdGet operation.
     * @callback module:api/DomainsApi~domainsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OneDomain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one domain by id
     * Get single domain that belongs to organization by its id.
     * @param {Number} id ID of domain
     * @param {module:api/DomainsApi~domainsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OneDomain}
     */
    domainsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling domainsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OneDomain;
      return this.apiClient.callApi(
        '/domains/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsIdPut operation.
     * @callback module:api/DomainsApi~domainsIdPutCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update domain
     * Update domain properties.
     * @param {Number} id ID of domain
     * @param {Object} opts Optional parameters
     * @param {module:model/InlineObject1} opts.inlineObject1 
     * @param {module:api/DomainsApi~domainsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    domainsIdPut(id, opts, callback) {
      opts = opts || {};
      let postBody = opts['inlineObject1'];
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling domainsIdPut");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/domains/{id}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsNameNameGet operation.
     * @callback module:api/DomainsApi~domainsNameNameGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one domain by name
     * Get single domain that belongs to organization by its name.
     * @param {String} name FQDN of domain
     * @param {module:api/DomainsApi~domainsNameNameGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    domainsNameNameGet(name, callback) {
      let postBody = null;
      // verify the required parameter 'name' is set
      if (name === undefined || name === null) {
        throw new Error("Missing the required parameter 'name' when calling domainsNameNameGet");
      }

      let pathParams = {
        'name': name
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/domains/name/{name}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the domainsPost operation.
     * @callback module:api/DomainsApi~domainsPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add domain
     * Add domain to organization. </br> For subdomain type of domain, appropriate DNS record will be created. 
     * @param {Object} opts Optional parameters
     * @param {module:model/UNKNOWN_BASE_TYPE} opts.UNKNOWN_BASE_TYPE success
     * @param {module:api/DomainsApi~domainsPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    domainsPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['UNKNOWN_BASE_TYPE'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/domains', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infoBasedomainsGet operation.
     * @callback module:api/DomainsApi~infoBasedomainsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InlineResponse2001>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get base domains
     * List base domains. Base domains are shared between organization. </br> Subdomains created on top of base domain. 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.purpose Specify domain purpose. Can be either \"subdomain\" or \"mailbox\". If parameter is not specified, domains with all purposes are returned. </br> <strong>Note:</strong> currently only \"subdomain\" purpose is implemented. 
     * @param {module:api/DomainsApi~infoBasedomainsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InlineResponse2001>}
     */
    infoBasedomainsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'purpose': opts['purpose']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [InlineResponse2001];
      return this.apiClient.callApi(
        '/info/basedomains', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the infoDomainGet operation.
     * @callback module:api/DomainsApi~infoDomainGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Check domain availability
     * Check that subdomain is not in use and can be registered. 
     * @param {String} fqdn FQDN that is checked for availability 
     * @param {module:api/DomainsApi~infoDomainGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    infoDomainGet(fqdn, callback) {
      let postBody = null;
      // verify the required parameter 'fqdn' is set
      if (fqdn === undefined || fqdn === null) {
        throw new Error("Missing the required parameter 'fqdn' when calling infoDomainGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'fqdn': fqdn
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/info/domain', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
