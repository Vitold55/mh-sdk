/**
 * Mail-Hub API
 * This is a specification for Mail-Hub API  # Authentication  <!-- ReDoc-Inject: <security-definitions> -->
 *
 * The version of the OpenAPI document: 0.8.0
 * Contact: support@mail-hub.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Attachment from '../model/Attachment';
import InlineResponse200 from '../model/InlineResponse200';
import InlineResponse2006 from '../model/InlineResponse2006';
import Mail from '../model/Mail';
import Model0 from '../model/Model0';
import OneAttachment from '../model/OneAttachment';
import OneOfobjectobject from '../model/OneOfobjectobject';
import Source from '../model/Source';

/**
* Mails service.
* @module api/MailsApi
* @version 0.8.0
*/
export default class MailsApi {

    /**
    * Constructs a new MailsApi. 
    * @alias module:api/MailsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mailsGet operation.
     * @callback module:api/MailsApi~mailsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse2006} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all mails
     * List all received mails for organization
     * @param {Object} opts Optional parameters
     * @param {Number} opts.page page of pagination
     * @param {Number} opts.limit mails per page (default to 20)
     * @param {String} opts.filterDomain filter domains
     * @param {Array.<String>} opts.filterDomain2 filter domains
     * @param {String} opts.filterTo filter by rcpt to
     * @param {String} opts.filterFrom filter by from address
     * @param {Number} opts.filterDateFrom filter from date
     * @param {Number} opts.filterDateTo filter to date
     * @param {module:api/MailsApi~mailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse2006}
     */
    mailsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'limit': opts['limit'],
        'filter_domain': opts['filterDomain'],
        'filter_domain[]': this.apiClient.buildCollectionParam(opts['filterDomain2'], 'multi'),
        'filter_to': opts['filterTo'],
        'filter_from': opts['filterFrom'],
        'filter_date_from': opts['filterDateFrom'],
        'filter_date_to': opts['filterDateTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse2006;
      return this.apiClient.callApi(
        '/mails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mailsIdAttachmentsAttachmentIdGet operation.
     * @callback module:api/MailsApi~mailsIdAttachmentsAttachmentIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OneAttachment} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one attachment
     * Get one attachment by mail id and attachment id
     * @param {String} id ID of mail
     * @param {Number} attachmentId ID of attachment
     * @param {module:api/MailsApi~mailsIdAttachmentsAttachmentIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OneAttachment}
     */
    mailsIdAttachmentsAttachmentIdGet(id, attachmentId, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mailsIdAttachmentsAttachmentIdGet");
      }
      // verify the required parameter 'attachmentId' is set
      if (attachmentId === undefined || attachmentId === null) {
        throw new Error("Missing the required parameter 'attachmentId' when calling mailsIdAttachmentsAttachmentIdGet");
      }

      let pathParams = {
        'id': id,
        'attachment_id': attachmentId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OneAttachment;
      return this.apiClient.callApi(
        '/mails/{id}/attachments/{attachment_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mailsIdAttachmentsGet operation.
     * @callback module:api/MailsApi~mailsIdAttachmentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Attachment>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all attachments
     * Get short information of attachments by mail id
     * @param {Number} id ID of mail
     * @param {module:api/MailsApi~mailsIdAttachmentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Attachment>}
     */
    mailsIdAttachmentsGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mailsIdAttachmentsGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Attachment];
      return this.apiClient.callApi(
        '/mails/{id}/attachments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mailsIdDelete operation.
     * @callback module:api/MailsApi~mailsIdDeleteCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete one mail
     * Delete one mail by id </br> Source of email and attachments deleted as well. 
     * @param {Number} id ID of mail
     * @param {module:api/MailsApi~mailsIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    mailsIdDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mailsIdDelete");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InlineResponse200;
      return this.apiClient.callApi(
        '/mails/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mailsIdGet operation.
     * @callback module:api/MailsApi~mailsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Mail} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get one mail
     * Get one mail by id
     * @param {Number} id ID of mail
     * @param {module:api/MailsApi~mailsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Mail}
     */
    mailsIdGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mailsIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Mail;
      return this.apiClient.callApi(
        '/mails/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mailsIdSourcesGet operation.
     * @callback module:api/MailsApi~mailsIdSourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Source} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get source of mail
     * Get source of mail by mail id
     * @param {Number} id ID of mail
     * @param {module:api/MailsApi~mailsIdSourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Source}
     */
    mailsIdSourcesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling mailsIdSourcesGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['bearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Source;
      return this.apiClient.callApi(
        '/mails/{id}/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
